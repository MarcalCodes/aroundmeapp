# For this demo, we'll create the following scenario:
#
#  - Step 1: 3 Areas: 2400, 2401, 2402
#  - Step 2: 2 Users: Abba and Elsa
#  - Step 3: 3 Subscriptions for the user Elsa. 1 subscription to each Area
#  - Step 4: 3 Events, all created by the user Abba.
#     - 1 event will be in area 2400
#     - the 2 other one will be in area 2401
#     - no events happening in area 2402
#

### Step 1.1 - Add Area 2400 - will have ID 1
POST http://localhost:3000/areas
Content-Type: application/json

{ "postcode": 2400 }

### Step 1.2 - Add Area 2401 - will have ID 2
POST http://localhost:3000/areas
Content-Type: application/json

{ "postcode": 2401 }

### Step 1.3 - Add Area 2402 - will have ID 3
POST http://localhost:3000/areas
Content-Type: application/json

{ "postcode": 2402 }

### Step 2.1 - Create User "Abba" - will have ID 1
POST http://localhost:3000/users
Content-Type: application/json

{
  "email": "abba@example.com",
  "name": "Abba"
}

### Step 2.2 - Create User "Elsa" - will have ID 2
POST http://localhost:3000/users
Content-Type: application/json

{
  "email": "elsa@example.com",
  "name": "Elsa"
}

### Step 3.1 - Create Subscription 1 - Elsa to Area 2400 - Will have ID 1
POST http://localhost:3000/subscriptions
Content-Type: application/json

{
  "userId": 2,
  "areaId": 1
}

### Step 3.2 - Create Subscription 2 - Elsa to Area 2401 - Will have ID 2
POST http://localhost:3000/subscriptions
Content-Type: application/json

{
  "userId": 2,
  "areaId": 2
}

### Step 3.3 - Create Subscription 3 - Elsa to Area 2402 - Will have ID 3
POST http://localhost:3000/subscriptions
Content-Type: application/json

{
  "userId": 2,
  "areaId": 3
}

### Step 4.1 - Creating Event 1 - Created by Abba in Area 2400 - will have ID 1
POST http://localhost:3000/events
Content-Type: application/json

{
  "name": "First event",
  "startsAt": "2025-04-20T09:00:00",
  "endsAt": "2025-04-20T20:00:00",
  "creatorId": 1,
  "areaId": 1
}

### Step 4.2 - Creating Event 2 - Created by Abba in Area 2401 - will have ID 2
POST http://localhost:3000/events
Content-Type: application/json

{
  "name": "Second event",
  "startsAt": "2025-05-01T09:00:00",
  "endsAt": "2025-04-20T17:00:00",
  "creatorId": 1,
  "areaId": 2
}

### Step 4.3 - Creating Event 3 - Created by Abba in Area 2402 - will have ID 3
POST http://localhost:3000/events
Content-Type: application/json

{
  "name": "Third event",
  "startsAt": "2025-04-21T09:00:00",
  "endsAt": "2025-04-25T21:00:00",
  "creatorId": 1,
  "areaId": 2
}

### Step 5.1 - Advanced APIs - Get all areas a user subscribed to - Elsa case - Should be the 3 areas
GET http://localhost:3000/users/2/areas
Content-Type: application/json

### Step 5.2 - Advanced APIs - Get all areas a user subscribed to - Abba case - Should be 0 areas
GET http://localhost:3000/users/1/areas
Content-Type: application/json

### Step 6.1 - Advanced APIs - Get all the events a user created - Elsa case - Should be 0 events
GET http://localhost:3000/users/2/events
Content-Type: application/json

### Step 6.2 - Advanced APIs - Get all the events a user created - Abba case - Should be 3 events
GET http://localhost:3000/users/1/events
Content-Type: application/json

### Step 7 - Advanced APIs - Get all the users who subscribed to a given Area - Should only return Elsa
GET http://localhost:3000/areas/1/users
Content-Type: application/json

### Step 8.1 - Advanced APIs - Get all the events happening in a given Area - Area 2400 - Should be 1 events
GET http://localhost:3000/areas/1/events
Content-Type: application/json

### Step 8.2 - Advanced APIs - Get all the events happening in a givent Area - Area 2401 - Should be 2 events
GET http://localhost:3000/areas/2/events
Content-Type: application/json

### Step 8.3 - Advanced APIs - Get all the events happening in a givent Area - Area 2402 - Should be 0 events
GET http://localhost:3000/areas/3/events
Content-Type: application/json

### Extra examples 1.1 - Update an Event - Before - Read details of the "First Event"
GET http://localhost:3000/events/1
Content-Type: application/json

### Extra examples 1.2 - Update an Event - Change the name of the "First Event"
PUT http://localhost:3000/events/1
Content-Type: application/json

{
  "name": "This is the new name of the First Event",
  "startsAt": "2025-04-21T09:00:00",
  "endsAt": "2025-04-25T21:00:00",
  "creatorId": 1,
  "areaId": 1
}

### Extra examples 1.3 - Update an Event - After - Re-read details of the "First Event"
GET http://localhost:3000/events/1
Content-Type: application/json

### Extra examples 2.1 - Soft-Deletion of an Event - Before - The `canceledAt` field is null - The event has not been canceled
GET http://localhost:3000/events/1
Content-Type: application/json

### Extra examples 2.2 - Soft-Deletion of an Event - It only soft-delete the event
DELETE http://localhost:3000/events/1
Content-Type: application/json

### Extra examples 2.3 - Soft-Deletion of an Event - After - The `canceledAt` field is set to a Date - The event has been canceled
GET http://localhost:3000/events/1
Content-Type: application/json

### Create a new user with firstname, lastname, passwordhash
POST http://localhost:3000/users
Content-Type: application/json

{
  "email": "Ingrid@example.com",
  "firstname": "Ingrid",
  "lastname": "Marcal",
  "password": "superpassword123"
}

### Get all users
GET http://localhost:3000/users


### Test login
POST http://localhost:3000/login
Content-Type: application/json

{
  "email": "marcal.delaine@gmail.com",
  "password": "password123"
}


### Login and get cookie
POST http://localhost:3000/login
Content-Type: application/json

{
  "email": "marcal.delaine@gmail.com",
  "password": "password123"
}
### Step 2: Check session
GET http://localhost:3000/me
